React 정리

* Day 01
    - 리엑트 컴포넌트 생성 : class 이름 extends React.Component{};
    - 리엑트 컴포넌트 내에 html 에 반환하는 함수 : render 
        ex) 
            const e = React.createElement;      // 리엑트에서 html 엘리먼트 생성법

            class Example01 extends React.Component{
                constructor(props){
                    super(props);       // 이 부분은 아직 몰라도 됨
                }

                render(){
                    return e('button',null,'Like');
                }
            }
    - 위의 예제 내의 return e 부분 두번쨰 인자를 바꾸면 엘리먼트 속성이 변환됨 ( CamelCase 로 작성 필요, 객체 형식으로 작성 필요)
        ex)
            render(){
                return e('button',{onClick: () => {console.log("Clicked")},type : "submit"});
            }
        
        결과 : 콘솔에 Clicked 가 출력됨

    - 컴포넌트 생성 후, 실제 브라우저에 적용시키는 방법
        ReactDOM.render 를 사용해 브라우저에 적용시켜야 함.
            ex)
                const e = React.createElement;      // 리엑트에서 html 엘리먼트 생성법

                class Example01 extends React.Component{
                    constructor(props){
                        super(props);       // 이 부분은 아직 몰라도 됨
                    }

                    render(){
                        return e('button',null,'Like');
                    }
                }

                ReactDOM.render(e(Example01), document.querySelector("#root"))

    - 버튼 클릭으로 상태 변경하는 방법
        1. constructor 내에 this.state 추가
            - state 는 변경될 수 있는 상태를 표시함
                ex) 
                    constructor(props){
                        super(props);
                        this.state = {
                            Liked : false,
                        }
                    }

        2. render 함수의 두번쨰 인자를 state 변경이 가능하게 바꾸기
            - state 를 변경하는 함수는 this.setState 임.
                ex)
                    render(){
                        return e('button',{onClick : () => {this.setState({Liked : true})} , type : submit }, ..........)
                    }

        3. state 가 변경되었을 때, 버튼의 문구가 변경되게 하기
            - render 함수의 3번째 인자의 값을 바꿔준다
                ex)
                    render(){
                        return e.('button',{onClick : () => {this.setState({Liked : true})}, type : 'submit'},
                        this.state.Liked === true ? "Liked" : "Like"
                        )
                    }


* Day 02
    - JSX 사용 방법
        1. JSX 문법을 사용하기 위해서는 Babel 을 필요로 함.
        2. 작성한 코드의 Script 태그 Type 에 text/babel 을 넣어줘야 함
        3. 문법이 명확하여 태그 뒤에 " /> " 를 붙여줘야 함.
            ex)
                <script src = "https://unpkg.com/babel-standalone@6/babel.min.js "></scipt>
                <script type = "text/babel">
                    .......
                    ......
                </script>

    - JSX 를 사용하여 기존의 코드 수정하기
        1. 기존 코드
            <script>
                const e = React.createElement;      // 리엑트에서 html 엘리먼트 생성법

                class Example01 extends React.Component{
                    constructor(props){
                        super(props);       // 이 부분은 아직 몰라도 됨
                        this.state = {
                                Liked : false,
                            }
                    }

                    render(){
                        render(){
                            return e.('button',{onClick : () => {this.setState({Liked : true})}, type : 'submit'},
                            this.state.Liked === true ? "Liked" : "Like"
                            )
                        }
                    }
                }

                ReactDOM.render(e(Example01), document.querySelector("#root"))
            </script>

        2.  변경 코드
            <script type = "text/babel">
                class Example02 extends React.Component{
                    constructor(props){
                        super(props);
                        this.state = {
                            Liked : false,
                        }
                    }

                    render(){
                        return <button type = "submit" onClick = { () => {this.setState({Liked:true})}}>
                            {this.state.Liked ? Liked : Like}
                            </button>
                    }
                }

                ReactDOM.render(<Example02 />, document.querySelector("#root"))
            </script>

        3. 결과
            - JSX 문법을 사용할 경우, React.createElement 메소드를 사용할 필요가 없음
            - JSX 문법을 사용할 경우, HTML 태그처럼 사용 가능 ( 단 무조건 끝에 " / " 를 붙여야 함.)

        - HTML 태그와 컴포넌트의 비교법
            1. 앞에 알파벳이 대문자로 시작하면 Component
            2. 앞에 알파벳이 소문자로 시작하면 HTML Tag

* Day03
    - 구구단 게임 만들기
        ex)
            <script type="text/babel">

            class GuGuDan extends React.Component {
                constructor(props){
                    super(props);
                    this.state = {
                        first : Math.ceil(Math.random()*10),
                        second : Math.ceil(Math.random()*10),
                        value : '',
                        result : '',
                    };
                }


                onSubmit = (e) =>{
                    e.preventDefault();
                    if(parseInt(this.state.value) === this.state.first * this.state.second){
                        this.setState({
                            first : Math.ceil(Math.random()*10),
                            second : Math.ceil(Math.random()*10),
                            value : '',
                            result : "정답!",
                        })
                    }
                    else {
                        this.setState({
                            value : '',
                            result : "오답!"
                        })
                    }
                }

                onChange = (e)=>{
                    this.setState({
                        value : e.target.value,
                    })
                }

                render(){
                   return (
                       <div>
                            <div>{this.state.first} 곱하기 {this.state.second} 는?</div>
                            <form onSubmit = {this.onSubmit}>
                                <input type="number" value = {this.state.value} onChange = {this.onChange} />
                                <button> 입력! </button>
                            </form>
                            <div>{this.state.result}</div>
                       </div>
                   )
                };
            }
        </script>
        <script type="text/babel">
            ReactDOM.render(<GuGuDan />, document.querySelector("#root"));
        </script>    

    - 클래스 메소드 ( Class Method )
        1. 리엑트에서는 render() 안에 직접 자바스크립트 코드를 적는것은 피해야 함.
        2. 클래스 안에 새로운 메소드로 생성하고, render() 에 넣어주는 것이 적합
            ex)
                class Example03 extends React.Component{
                    constructor(props){
                        super(props);
                        this.state = {
                            name : '',
                        }
                    }

                    rename = () => {
                        return this.state.name + "일까요?";
                    }

                    render(){
                        return (
                            <div>
                                <div> {this.state.name} </div>
                                <div> {this.rename} </div>
                            </div>
                        )
                    }
                }

    - Fragment 를 사용해 쓸모없는 DIV 태그 없애기
        1. 리엑트는 두 개 이상의 태그가 한 태그안에 포함되어 있지 않을 경우, 에러가 발생됨
        2. 위 에러를 해결하기 위해 <div> 를 상단에 추가했었는데, Fragment 를 사용할 경우, 문제가 해결됨
        3. Fragment 사용법
            ex)
                render(){
                    return (
                        <>
                            <div> {this.state.name} </div>
                            <div> {this.rename} </div>
                        </>
                    )
                }

        4. Babel 이 위 문법을 지원을 하지 않을 경우
            ex)
                render(){
                    return (
                        <React.Fragment>
                            <div> {this.state.name} </div>
                            <div> {this.rename} </div>
                        </React.Fragment>
                    )
                }

    - 함수형 setState
        1. setState 안에 this.state 를 사용할 경우, 적용되지 않을 수 있음
        2. setState 함수는 비동기이기 때문에 this.state 가 들어갈 경우, 함수를 사용해야 함.

            ex) 함수 미사용
                if(parseInt(this.state.value) === this.state.first * this.state.second){
                    this.setState({
                        first : Math.ceil(Math.random()*10),
                        second : Math.ceil(Math.random()*10),
                        value : '',
                        result : this.state.value + "정답!",
                    })
                }

            ex) 함수 사용
                if(parseInt(this.state.value) === this.state.first * this.state.second){
                    this.setState((prevState) => {
                        return {
                            first : Math.ceil(Math.random()*10),
                            second : Math.ceil(Math.random()*10),
                            value : '',
                            result : prevState.value + "정답!",
                        }
                    })
                }
    
        3. 사용법
            - this.setState() 안에 화살표 함수 넣기
            - 화살표 함수의 인자로 prevState 넣기
            - this.state 부분을 prevState 로 바꾸기

    - DOM 에 접근하는 방법
        1. input 태그 안에 ref 를 넣어준다.
            ex) 
                input;

                render(){
                    return (
                        <input type="number" onChange = {this.onChange} value = {this.state.value} ref = {(c)=>{this.input = c}} />
                    )
                }
        
        2. class 내의 메소드에 input 을 추가시킨다.
        3. 메소드 내에서 state 변화가 일어날 때, 같이 해당 메소드를 실행시켜준다.
            ex)
                if(parseInt(this.state.value) === this.state.first * this.state.second){
                    this.setState((prevState) => {
                        return {
                            first : Math.ceil(Math.random()*10),
                            second : Math.ceil(Math.random()*10),
                            value : '',
                            result : prevState.value + "정답!",
                        }
                    })
                    this.input.focus();
                }
                else {
                    this.setState({
                        value : '',
                        result : "오답!",
                    })
                    this.input.focus();
                }

* Day 04
    - 함수형 컴포넌트
        1. setState 와 ref 를 포함하지 않을 떄, 함수형 컴포넌트 생성 가능
        2. React.Component 로 생성하는 것보다 편리하고 빠르게 생성 가능
            ex)
                <script type="text/babel">
                    const HelloWorld = () => {
                        return <div>Hello World </div>;
                    }
                </script>

                <script type="text/babel">
                    ReactDOM.render(<HelloWorld />, document.querySelector("#root"))
                </script>

    - HOOKS
        1. 함수형 컴포넌트에서 사용 불가능했던 state 와 ref 를 사용 가능하게 하는 방법
        2. class 로 생성하는 컴포넌트보다 짧은 코드로 구현 가능
        3. Hooks 사용법
            - state : const [ "state 인자" , " 해당 인자의 setState "] = React.useState("초기값");
                ex) const [ first , setFirst ] = React.useState("null");
            
            - ref : const " ref이름 " = React.useRef("초기값");
                ex) const refInput = React.useRef("null");

            - ref : REF이름.current.DOM명령어
                ex) refInput.current.focus();
            
        4. Hooks 로 만드는 구구단
            ex)
                const GuGuDan = () =>{
                    const [ first , setFirst ] = React.useState(Math.ceil(Math.random()*10));
                    const [ second , setSecond ] = React.useState(Math.ceil(Math.random()*10));
                    const [ value , setValue ] = React.useState('');
                    const [ result , setResult ] = React.useState('');
                    const refInput = React.useRef(null);

                    const onSubmitForm = (e) =>{
                        e.preventDefault;
                        if(parseInt(value) === fisrt * second){
                            setFirst(Math.ceil(Math.random()*10));
                            setSecond(Math.ceil(Math.random()*10));
                            setValue('');
                            setResult("정답!"+value);
                        } else {
                            setValue('');
                            setResult("오답");
                        }
                    };

                    const onChangeInput = (e) => {
                        setValue(e.target.value);
                    }

                    return (
                        <React.Fragment>
                            <div>{first} 곱하기 {second} 는? </div>
                            <form onSubmit = {onSubmitForm}>
                                <input 
                                    type = "number"
                                    value = {value}
                                    onChange = {onChangeInput}
                                    ref = {refInput}
                                />
                                <button>입력</button>
                            </form>
                            <div>{result}</div>
                        </React.Fragment>
                    )
                }

        5. Hooks 의 장단점
            - Hooks 는 Class 와 다르게 state 가 바뀌면 함수 자체가 전부 다시 실행되기 때문에 Class 보다 느릴 수 있음
            

    - Node 와 Webpack 설치
        1. node.js 와 npm 을 설치
        2. 작업을 진행할 프로젝트에서 " npm init " + " npm i react react-dom " + " npm i -D webpack webpack-cli "
        3. 폴더에 webpack.config.js 생성

    - 파일 분리하기
        1. 분리된 파일의 처음에 필요한 모듈을 불러오기
            ex)
                const React = require('react');
                const ReactDOM = require('react-dom');

        2. 분리된 파일을 내보내기
            ex)
                module.exports = Example;

        3. 분리되었던 파일을 불러오기
            ex)
                const exam = require('./exam01.jsx');

        4. 예시
            ex)     불리는 컴포넌트.jsx
                const React = require('react');
                
                class Example01 extends React.Component{
                    render(){
                        return(
                            <div>Hello</div>
                        )
                    }
                }

                module.exports = Example01;

            ex)     불러오는 컴포넌트.jsx
                const React = require('react');
                const ReactDOM = require('react-dom');
                const newCompo = require('./불리는 컴포넌트.jsx');

                ReactDOM.render(< Example01 />,document.querySelector("#root"))

    - Webpack 사용법
        1. Path 모듈 불러와 경로 설정을 용이하게 하기
            ex)
                const path = require('path');

        2. module.exports 로 설정하기
            ex)
                module.exports = {
                    name : "" ,
                    devtool : "eval",
                        .
                        .
                        .
                        .
                }
        
        3. module.exports 안에 Input 과 Output 설정하기
            ex)
                resolve : {
                    extensions : ['.js','.jsx']             // 파일 확장자를 미리 지정해 파일 이름만 쳐도 검색되게 하는 기능
                },

                entry : {
                    app : ['./client',]                     // 입력
                },
                output : {
                    path: path.join(__dirname,'dist'),
                    filename : 'app.js',                    // 출력
                },

        4. 예시
            ex)
                const path = require('path');

                module.exports = {
                    name : "wordRelay-setting",
                    mode : "development",
                    devtool : "eval",
                    resolve : {
                        extensions : ['.js','.jsx']
                    },

                    entry : {
                        app : ['./client',]
                    },
                    output : {
                        path: path.join(__dirname,'dist'),
                        filename : 'app.js',
                    },
                }

* Day 05
    - 노마드 코더의 강의 따라하기
    - creat-react-app 으로 빠른 설정 후, 리엑트로 앱 제작
    - App.js 까지 구축 완료