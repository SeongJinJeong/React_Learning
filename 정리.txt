React 정리

* Day 01
    - 리엑트 컴포넌트 생성 : class 이름 extends React.Component{};
    - 리엑트 컴포넌트 내에 html 에 반환하는 함수 : render 
        ex) 
            const e = React.createElement;      // 리엑트에서 html 엘리먼트 생성법

            class Example01 extends React.Component{
                constructor(props){
                    super(props);       // 이 부분은 아직 몰라도 됨
                }

                render(){
                    return e('button',null,'Like');
                }
            }
    - 위의 예제 내의 return e 부분 두번쨰 인자를 바꾸면 엘리먼트 속성이 변환됨 ( CamelCase 로 작성 필요, 객체 형식으로 작성 필요)
        ex)
            render(){
                return e('button',{onClick: () => {console.log("Clicked")},type : "submit"});
            }
        
        결과 : 콘솔에 Clicked 가 출력됨

    - 컴포넌트 생성 후, 실제 브라우저에 적용시키는 방법
        ReactDOM.render 를 사용해 브라우저에 적용시켜야 함.
            ex)
                const e = React.createElement;      // 리엑트에서 html 엘리먼트 생성법

                class Example01 extends React.Component{
                    constructor(props){
                        super(props);       // 이 부분은 아직 몰라도 됨
                    }

                    render(){
                        return e('button',null,'Like');
                    }
                }

                ReactDOM.render(e(Example01), document.querySelector("#root"))

    - 버튼 클릭으로 상태 변경하는 방법
        1. constructor 내에 this.state 추가
            - state 는 변경될 수 있는 상태를 표시함
                ex) 
                    constructor(props){
                        super(props);
                        this.state = {
                            Liked : false,
                        }
                    }

        2. render 함수의 두번쨰 인자를 state 변경이 가능하게 바꾸기
            - state 를 변경하는 함수는 this.setState 임.
                ex)
                    render(){
                        return e('button',{onClick : () => {this.setState({Liked : true})} , type : submit }, ..........)
                    }

        3. state 가 변경되었을 때, 버튼의 문구가 변경되게 하기
            - render 함수의 3번째 인자의 값을 바꿔준다
                ex)
                    render(){
                        return e.('button',{onClick : () => {this.setState({Liked : true})}, type : 'submit'},
                        this.state.Liked === true ? "Liked" : "Like"
                        )
                    }


* Day 02
    - JSX 사용 방법
        1. JSX 문법을 사용하기 위해서는 Babel 을 필요로 함.
        2. 작성한 코드의 Script 태그 Type 에 text/babel 을 넣어줘야 함
        3. 문법이 명확하여 태그 뒤에 " /> " 를 붙여줘야 함.
            ex)
                <script src = "https://unpkg.com/babel-standalone@6/babel.min.js "></scipt>
                <script type = "text/babel">
                    .......
                    ......
                </script>

    - JSX 를 사용하여 기존의 코드 수정하기
        1. 기존 코드
            <script>
                const e = React.createElement;      // 리엑트에서 html 엘리먼트 생성법

                class Example01 extends React.Component{
                    constructor(props){
                        super(props);       // 이 부분은 아직 몰라도 됨
                        this.state = {
                                Liked : false,
                            }
                    }

                    render(){
                        render(){
                            return e.('button',{onClick : () => {this.setState({Liked : true})}, type : 'submit'},
                            this.state.Liked === true ? "Liked" : "Like"
                            )
                        }
                    }
                }

                ReactDOM.render(e(Example01), document.querySelector("#root"))
            </script>

        2.  변경 코드
            <script type = "text/babel">
                class Example02 extends React.Component{
                    constructor(props){
                        super(props);
                        this.state = {
                            Liked : false,
                        }
                    }

                    render(){
                        return <button type = "submit" onClick = { () => {this.setState({Liked:true})}}>
                            {this.state.Liked ? Liked : Like}
                            </button>
                    }
                }

                ReactDOM.render(<Example02 />, document.querySelector("#root"))
            </script>

        3. 결과
            - JSX 문법을 사용할 경우, React.createElement 메소드를 사용할 필요가 없음
            - JSX 문법을 사용할 경우, HTML 태그처럼 사용 가능 ( 단 무조건 끝에 " / " 를 붙여야 함.)

        - HTML 태그와 컴포넌트의 비교법
            1. 앞에 알파벳이 대문자로 시작하면 Component
            2. 앞에 알파벳이 소문자로 시작하면 HTML Tag

* Day03
    - 구구단 게임 만들기
        ex)
            <script type="text/babel">

            class GuGuDan extends React.Component {
                constructor(props){
                    super(props);
                    this.state = {
                        first : Math.ceil(Math.random()*10),
                        second : Math.ceil(Math.random()*10),
                        value : '',
                        result : '',
                    };
                }


                onSubmit = (e) =>{
                    e.preventDefault();
                    if(parseInt(this.state.value) === this.state.first * this.state.second){
                        this.setState({
                            first : Math.ceil(Math.random()*10),
                            second : Math.ceil(Math.random()*10),
                            value : '',
                            result : "정답!",
                        })
                    }
                    else {
                        this.setState({
                            value : '',
                            result : "오답!"
                        })
                    }
                }

                onChange = (e)=>{
                    this.setState({
                        value : e.target.value,
                    })
                }

                render(){
                   return (
                       <div>
                            <div>{this.state.first} 곱하기 {this.state.second} 는?</div>
                            <form onSubmit = {this.onSubmit}>
                                <input type="number" value = {this.state.value} onChange = {this.onChange} />
                                <button> 입력! </button>
                            </form>
                            <div>{this.state.result}</div>
                       </div>
                   )
                };
            }
        </script>
        <script type="text/babel">
            ReactDOM.render(<GuGuDan />, document.querySelector("#root"));
        </script>    

    - 클래스 메소드 ( Class Method )
        1. 리엑트에서는 render() 안에 직접 자바스크립트 코드를 적는것은 피해야 함.
        2. 클래스 안에 새로운 메소드로 생성하고, render() 에 넣어주는 것이 적합
            ex)
                class Example03 extends React.Component{
                    constructor(props){
                        super(props);
                        this.state = {
                            name : '',
                        }
                    }

                    rename = () => {
                        return this.state.name + "일까요?";
                    }

                    render(){
                        return (
                            <div>
                                <div> {this.state.name} </div>
                                <div> {this.rename} </div>
                            </div>
                        )
                    }
                }

    - Fragment 를 사용해 쓸모없는 DIV 태그 없애기
        1. 리엑트는 두 개 이상의 태그가 한 태그안에 포함되어 있지 않을 경우, 에러가 발생됨
        2. 위 에러를 해결하기 위해 <div> 를 상단에 추가했었는데, Fragment 를 사용할 경우, 문제가 해결됨
        3. Fragment 사용법
            ex)
                render(){
                    return (
                        <>
                            <div> {this.state.name} </div>
                            <div> {this.rename} </div>
                        </>
                    )
                }

        4. Babel 이 위 문법을 지원을 하지 않을 경우
            ex)
                render(){
                    return (
                        <React.Fragment>
                            <div> {this.state.name} </div>
                            <div> {this.rename} </div>
                        </React.Fragment>
                    )
                }